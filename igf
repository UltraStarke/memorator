import  telebot
from telebot import types
import requests
import random
import os.path
import sqlite3
from  PIL import Image, ImageDraw, ImageFont

bot = telebot.TeleBot('token')
states = []


def file_save(file_id, user_id): #save users image into the users folder
    file_info = bot.get_file(file_id) 
    downloaded_file = bot.download_file(file_info.file_path)
    with open(str(user_id)+'/'+str(image_counter(user_id))+".jpg", 'wb') as new_file:
        new_file.write(downloaded_file)
        
def frame_draw(im,txt):
    frame_wdt = int(im.width*1.2)
    frame_hgt = int((frame_wdt-im.width)*1.5)+im.height
    frame = Image.new('RGBA', (frame_wdt, frame_hgt), 'black')
    stroke_hgt = int(im.height*1.02)
    stroke_wdt = int(im.width*1.02)
    white_frame = Image.new('RGBA', (stroke_wdt, stroke_hgt), 'white')
    x = int((white_frame.width-im.width)/2)
    y = int((white_frame.height-im.height)/2)
    white_frame.paste(im,(x,y))
    x = int((frame.width-white_frame.width)/2)
    y = int((frame.height-white_frame.height)/3)
    frame.paste(white_frame,(x,x))
    return text_draw(frame, txt)

def check_states(user_id):
    if len(states) > 0:
        for i in states:
            if i[0] == str(user_id):
                return True
    return False    
def find_states(user_id):
    counter = 0
    if len(states) > 0:
        for i in states:
            if i[0] == str(user_id):
                return counter 
            else:
                counter += 1
    return False

def image_counter(user_id):#count how many files contains users folder 
    num_files = len([f for f in os.listdir(str(user_id))
                     if os.path.isfile(os.path.join(str(user_id), f))])
    return(num_files)

def text_draw(im,txt, dif_y = 0, dif_x = 0):#write the text 
    if dif_y != 0:
        fnt_size = int((im.height - dif_y)/3) 
        x = int((im.width-(len(txt))*fnt_size*0.5)/2)
        if int(len(txt)*fnt_size*0.5) >= (im.width - dif_x*2):
            first_line = txt
            second_line = ''
            while int(len(first_line)*fnt_size*0.5) >= (im.width - dif_x*2):
                space_index = first_line.rfind(' ')
                second_line = first_line[(space_index):len(first_line)]+second_line
                first_line = first_line[0:space_index]
                print(first_line+'||'+second_line)
            print(first_line+'||'+second_line)
            
            y = int(im.height - fnt_size*2.5)
            x1 = int((im.width-(len(first_line))*fnt_size*0.5)/2)
            x2 = int((im.width-(len(second_line))*fnt_size*0.5)/2)
            y1 = int(im.height - fnt_size*3)
            y2 = int(im.height - fnt_size*1.5)
            
            strk = int(fnt_size*0.02)#some manipulation to receive text stroke 
            fnt = ImageFont.truetype('mem_font.ttf',size = fnt_size)
            draw = ImageDraw.Draw(im)
            
            draw.text((x1+strk,y1-strk),first_line,font = fnt, fill = (0,0,0))
            draw.text((x1+strk,y1+strk),first_line,font = fnt, fill = (0,0,0))
            draw.text((x1-strk,y1+strk),first_line,font = fnt, fill = (0,0,0))
            draw.text((x1-strk,y1-strk),first_line,font = fnt, fill = (0,0,0))
            draw.text((x1,y1),first_line,font = fnt, fill = (255,255,255))
            
            draw = ImageDraw.Draw(im)
            
            draw.text((x2+strk,y2-strk),second_line,font = fnt, fill = (0,0,0))
            draw.text((x2+strk,y2+strk),second_line,font = fnt, fill = (0,0,0))
            draw.text((x2-strk,y2+strk),second_line,font = fnt, fill = (0,0,0))
            draw.text((x2-strk,y2-strk),second_line,font = fnt, fill = (0,0,0))
            draw.text((x2,y2),second_line,font = fnt, fill = (255,255,255))
        else:
            
            y = int(im.height - fnt_size*2.5)
            
            strk = int(fnt_size*0.02)#some manipulation to receive text stroke 
            fnt = ImageFont.truetype('mem_font.ttf',size = fnt_size)
            draw = ImageDraw.Draw(im)
            
            draw.text((x+strk,y-strk),txt,font = fnt, fill = (0,0,0))
            draw.text((x+strk,y+strk),txt,font = fnt, fill = (0,0,0))
            draw.text((x-strk,y+strk),txt,font = fnt, fill = (0,0,0))
            draw.text((x-strk,y-strk),txt,font = fnt, fill = (0,0,0))
            draw.text((x,y),txt,font = fnt, fill = (255,255,255))
    return im

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    keyboard  = types.InlineKeyboardMarkup()
    button_demo = types.InlineKeyboardButton('Demotivator',callback_data = "demotivator")
    button_sign = types.InlineKeyboardButton('Sign', callback_data = "sign")
    keyboard.add(button_demo, button_sign)
    if len(message.text)>64:
        bot.send_message(message.from_user.id,"Please write text less than 64 characters")
    else:
    
        if os.path.exists(str(message.from_user.id)):
            path = str(os.getcwd())+'/'+str(message.from_user.id)+'/'
            mem = Image.open(path+str(image_counter(message.from_user.id)-1)+'.jpg')
            if check_states(message.from_user.id):
                if states[find_states(message.from_user.id)][1] == 'sign':
                    bot.send_photo(message.from_user.id, text_draw(mem,message.text),reply_markup=keyboard)
                else:
                    bot.send_photo(message.from_user.id, frame_draw(mem,message.text),reply_markup=keyboard)
            else:
                states.append([str(message.from_user.id),'sign','white','black'])
                bot.send_photo(message.from_user.id, text_draw(mem,message.text),reply_markup=keyboard)
        else:
            bot.send_message(message.from_user.id,"You haven't send any images yet")

@bot.callback_query_handler(func=lambda call: call.data == 'demotivator')
def demo_choose(callback_query: types.CallbackQuery):
    bot.send_message(callback_query.from_user.id, 'You choose demotivator')
    global states 
    states[find_states(callback_query.from_user.id)][1] = 'demo'
    
@bot.callback_query_handler(func=lambda call: call.data == 'sign')
def sign_choose(callback_query: types.CallbackQuery):
    bot.send_message(callback_query.from_user.id, 'You choose sign')
    global states 
    states[find_states(callback_query.from_user.id)][1] = 'sign'
 
@bot.message_handler(content_types=['photo'])
def photo(message):
    if os.path.exists(str(message.from_user.id)): #check if the user has a folder, and if not create one  
        file_save(message.photo[-1].file_id,message.from_user.id)
        global states
        states.append([str(message.from_user.id),'sign','white','black'])
    else:
        os.mkdir(str(message.from_user.id))
        file_save(message.photo[-1].file_id,message.from_user.id)
        
    bot.send_message(message.from_user.id,'Enter the text you want to add to the image')
    
@bot.message_handler(content_types=['audio','document'])
def other_files(message):
    bot.send_message(message.from_user.id,"I don't eat that i'm not a goat")
            
bot.polling(none_stop=True, interval=0)
